server:
  port: 8080
spring:
  application:
    name: "accounts"
  profiles:
    active: "prod"
  datasource:
    url: jdbc:h2:mem:testdb
    driverClassName: org.h2.Driver
    username: sa
    password: ''
    h2:
      console:
        enabled: true
    jpa:
      database-platform: org.hibernate.dialect.H2Dialect
      hibernate:
        ddl-auto: update
      show-sql: true
  #  datasource:
#    url: jdbc:mysql://localhost:3308/accountsdb
#    username: root
#    password: root
#    jpa:
#      show-sql: true
#  sql:
#    init:
#       mode: always
  config:
    import: "optional:configserver:http://localhost:8071/"
  cloud:
    openfeign:
      circuitbreaker:
        enabled: true
  rabbitmq:
    host: "localhost"
    port: 5672
    username: "guest"
    password: "guest"

management:
  endpoints:
    web:
      exposure:
        include: "*"
  endpoint:
    shutdown:
      enabled: true
  info:
    env:
      enabled: true
  metrics:
    tags:
      application: ${spring.application.name}

endpoints:
  shutdown:
    enabled: true # 유레카의 서비스를 끌 수 있도록 하는 설정값.

eureka:
  instance:
    preferIpAddress: true # 도메인이름이 아니라 ip주소를 사용해서 eureka에 등록한다.
  client:
    fetchRegistry: true # 해당 서비스가 유레카의 다른 서비스 인스턴스를 불러올 수 있도록 설정한다.
    registerWithEureka: true # 서비스를 유레카에 등록한다.
    serviceUrl:
      defaultZone: http://localhost:8070/eureka/ # 해당 ip 서버에 등록한다.

info:
  app:
    name: "accounts"
    description: "Eazy Bank Accounts Application"
    version: "1.0.0"

logging:
  level:
    com:
      eazybytes:
        accounts: DEBUG

resilience4j.circuitbreaker:
  configs:
    default:
      slidingWindowSize: 10 # 갯수만큼의 요청이 오면 서비스의 상태를 확인하는지.
      permittedNumberOfCallsInHalfOpenState: 2 # half open 상태를 처리할 때 설정한 요청의 갯수만큼이 올 떄 확안.
      failureRateThreshold: 50 # 숫자만큼 실패하면 open 상태로 바뀐다.
      waitDurationInOpenState: 10000 # 설정한 시간만큼 half open 상태로 둔다.


resilience4j.retry:
    configs:
      default:
        maxRetryAttempts: 3 # 3번 시도한다.
        waitDuration: 100 # 시간만큼 기다린다.
        enableExponentialBackoff: true # backoff 기능 on
        exponentialBackoffMultiple: 2
        ignoreException:
          - java.lang.NullPointerException
        retryException:
          - java.util.concurrent.TimeOutException

resilience4j.ratelimiter:
  configs:
    default:
      timeoutDuration: 1000 # 만료되었다면 설정한 시간까지는 요청을 할수 없다.
      limitRefreshPeriod: 5000 #5초마다 토큰이 충전된다.
      limitForPeriod: 1 # 5초마다 1번 요청이 가능하다.
